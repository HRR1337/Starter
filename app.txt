Traits/GenerateSlug.php

---content---

<?php

namespace App\Traits;

use Illuminate\Support\Str;
use Illuminate\Support\Facades\DB;

trait GenerateSlug
{
    protected function generateSlug($name, $tableName)
    {
        return substr(md5(uniqid(auth()->id(), true)), 0, 8);
    }
}


Providers/AppServiceProvider.php

---content---

<?php

namespace App\Providers;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Model::unguard();
    }
}


Providers/AuthServiceProvider.php

---content---

<?php

namespace App\Providers;

// use Illuminate\Support\Facades\Gate;
use App\Policies\ExceptionPolicy;
use BezhanSalleh\FilamentExceptions\Models\Exception;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The model to policy mappings for the application.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [
        Exception::class => ExceptionPolicy::class,
        \App\Models\NumberRange::class => \App\Policies\NumberRangePolicy::class,
    ];

    /**
     * Register any authentication / authorization services.
     */
    public function boot(): void
    {
        //
    }
}


Providers/RouteServiceProvider.php

---content---

<?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to your application's "home" route.
     *
     * Typically, users are redirected here after authentication.
     *
     * @var string
     */
    public const HOME = '/home';

    /**
     * Define your route model bindings, pattern filters, and other route configuration.
     */
    public function boot(): void
    {
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());
        });

        $this->routes(function () {
            Route::middleware('api')
                ->prefix('api')
                ->group(base_path('routes/api.php'));

            Route::middleware('web')
                ->group(base_path('routes/web.php'));
        });
    }
}


Providers/BroadcastServiceProvider.php

---content---

<?php

namespace App\Providers;

use Illuminate\Support\Facades\Broadcast;
use Illuminate\Support\ServiceProvider;

class BroadcastServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Broadcast::routes();

        require base_path('routes/channels.php');
    }
}


Providers/EventServiceProvider.php

---content---

<?php

namespace App\Providers;

use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Event;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event to listener mappings for the application.
     *
     * @var array<class-string, array<int, class-string>>
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
    ];

    /**
     * Register any events for your application.
     */
    public function boot(): void
    {
        //
    }

    /**
     * Determine if events and listeners should be automatically discovered.
     */
    public function shouldDiscoverEvents(): bool
    {
        return false;
    }
}


Providers/Filament/AdminPanelProvider.php

---content---

<?php

namespace App\Providers\Filament;

use Filament\Pages;
use Filament\Panel;
use App\Models\Team;
use Filament\Widgets;
use Filament\PanelProvider;
use App\Filament\Pages\Auth\Login;
use Filament\Support\Colors\Color;
use Filament\Http\Middleware\Authenticate;
use Illuminate\Session\Middleware\StartSession;
use Illuminate\Cookie\Middleware\EncryptCookies;
use Illuminate\Routing\Middleware\SubstituteBindings;
use Illuminate\Session\Middleware\AuthenticateSession;
use Illuminate\View\Middleware\ShareErrorsFromSession;
use Filament\Http\Middleware\DisableBladeIconComponents;
use Filament\Http\Middleware\DispatchServingFilamentEvent;
use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken;
use Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse;
use Amendozaaguiar\FilamentRouteStatistics\FilamentRouteStatisticsPlugin;



class AdminPanelProvider extends PanelProvider
{
    public function panel(Panel $panel): Panel
    {
        return $panel
            ->default()
            ->id('bdsmanager')
            ->path('bdsmanager')
            ->login()
            ->colors([
                'danger' => Color::Rose,
                'gray' => Color::Gray,
                'info' => Color::Blue,
                'primary' => Color::Indigo,
                'success' => Color::Emerald,
                'warning' => Color::Orange,
            ])
            ->plugins([
                \BezhanSalleh\FilamentShield\FilamentShieldPlugin::make(),
                \BezhanSalleh\FilamentExceptions\FilamentExceptionsPlugin::make(),
                FilamentRouteStatisticsPlugin::make(),
            ])
            ->brandLogo(fn () => view('components.logo'))
            ->font('Poppins')
            ->discoverResources(in: app_path('Filament/Resources'), for: 'App\\Filament\\Resources')
            ->discoverPages(in: app_path('Filament/Pages'), for: 'App\\Filament\\Pages')
            ->pages([
                Pages\Dashboard::class,
            ])
            ->discoverWidgets(in: app_path('Filament/Widgets'), for: 'App\\Filament\\Widgets')
            ->widgets([
                Widgets\AccountWidget::class,
                // Widgets\FilamentInfoWidget::class,
            ])
            ->middleware([
                EncryptCookies::class,
                AddQueuedCookiesToResponse::class,
                StartSession::class,
                AuthenticateSession::class,
                ShareErrorsFromSession::class,
                VerifyCsrfToken::class,
                SubstituteBindings::class,
                DisableBladeIconComponents::class,
                DispatchServingFilamentEvent::class,
            ])
            ->tenantMiddleware([
            ])
            ->authMiddleware([
                Authenticate::class,
            ])
            ->tenant(
                Team::class,
                slugAttribute: 'slug'
            );
    }
}


Models/Team.php

---content---

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class Team extends Model
{
    protected $fillable = [
        'name',
        'slug',
        'description',
        'created_by',
        'parent_id',
        'type',
        'level',
        'is_active'
    ];

    protected $casts = [
        'is_active' => 'boolean',
    ];

    // Add boot method for setting the level
    protected static function boot()
    {
        parent::boot();

        static::saving(function ($team) {
            if ($team->parent_id) {
                // Update the level based on the parent's level
                $parentTeam = Team::find($team->parent_id);
                $team->level = $parentTeam ? $parentTeam->level + 1 : 0;
            } else {
                // Root level team
                $team->level = 0;
            }
        });
    }

    // Helper method to get all descendants
    private function getDescendants($teamId, &$descendants)
    {
        $childTeams = Team::where('parent_id', $teamId)->get();
        
        foreach ($childTeams as $child) {
            $descendants->push($child->id);
            $this->getDescendants($child->id, $descendants);
        }
    }

    // Existing relationships
    public function users(): BelongsToMany
    {
        return $this->belongsToMany(User::class)->withTimestamps();
    }

    public function createdBy(): BelongsTo
    {
        return $this->belongsTo(User::class, 'created_by');
    }

    public function numberRanges(): HasMany
    {
        return $this->hasMany(NumberRange::class);
    }

    // Hierarchy relationships
    public function parent(): BelongsTo
    {
        return $this->belongsTo(Team::class, 'parent_id');
    }

    public function children(): HasMany
    {
        return $this->hasMany(Team::class, 'parent_id');
    }

    // Helper methods for hierarchy
    public function allChildren()
    {
        return $this->children()->with('children');
    }

    public function ancestors()
    {
        return $this->parent()->with('parent');
    }

    // Get all descendants as a flat collection
    public function getAllDescendants(): \Illuminate\Support\Collection
    {
        $descendants = collect();
        $this->getDescendants($this->id, $descendants);
        return $descendants;
    }

    // Get all ancestors as a collection
    public function getAllAncestors(): \Illuminate\Support\Collection
    {
        $ancestors = collect();
        $parent = $this->parent;
        
        while ($parent) {
            $ancestors->push($parent);
            $parent = $parent->parent;
        }

        return $ancestors;
    }

    // Scopes
    public function scopeActive(Builder $query): void
    {
        $query->where('is_active', true);
    }

    public function scopeRootLevel(Builder $query): void
    {
        $query->whereNull('parent_id');
    }

    public function scopeOfType(Builder $query, string $type): void
    {
        $query->where('type', $type);
    }

    // Helper methods
    public function isRoot(): bool
    {
        return is_null($this->parent_id);
    }

    public function hasChildren(): bool
    {
        return $this->children()->count() > 0;
    }

    public function getFullHierarchyAttribute(): string
    {
        $hierarchy = collect([$this->name]);
        $parent = $this->parent;

        while ($parent) {
            $hierarchy->prepend($parent->name);
            $parent = $parent->parent;
        }

        return $hierarchy->join(' > ');
    }

    // Get the depth level in the hierarchy
    public function getDepthLevel(): int
    {
        return $this->level;
    }

    // Check if this team is a descendant of another team
    public function isDescendantOf(Team $team): bool
    {
        return $this->getAllAncestors()->contains($team);
    }

    // Check if this team is an ancestor of another team
    public function isAncestorOf(Team $team): bool
    {
        return $team->getAllAncestors()->contains($this);
    }

    // Get siblings (other teams with the same parent)
    public function getSiblings()
    {
        return Team::where('parent_id', $this->parent_id)
            ->where('id', '!=', $this->id)
            ->get();
    }

    // Move team to a new parent
    public function moveTo(?Team $newParent = null)
    {
        $this->parent_id = $newParent ? $newParent->id : null;
        $this->save(); // This will trigger the validation in boot()
    }
}


Models/User.php

---content---

<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Filament\Panel;
use Filament\Facades\Filament;
use Laravel\Sanctum\HasApiTokens;
use Illuminate\Support\Collection;
use Spatie\Permission\Traits\HasRoles;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Notifications\Notifiable;
use Filament\Models\Contracts\HasTenants;
use BezhanSalleh\FilamentShield\Traits\HasPanelShield;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class User extends Authenticatable implements HasTenants
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles, HasPanelShield;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    public function getTenants(Panel $panel): Collection
    {
        return $this->teams;
    }

    public function teams(): BelongsToMany
    {
        return $this->belongsToMany(Team::class);
    }

    public function canAccessTenant(Model $tenant): bool
    {
        return $this->teams->contains($tenant);
    }

    public function team()
    {
        return $this->teams()
            ->where('team_id', Filament::getTenant()->id);
    }
}

Models/NumberRange.php

---content---

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class NumberRange extends Model
{
    protected $fillable = [
        'team_id',
        'start_number',
        'end_number',
        'description',
        'created_by'
    ];

    protected $appends = ['range_start', 'range_end'];

    // Convert range number to actual number when saving
    public function setRangeStartAttribute($value)
    {
        $this->attributes['start_number'] = ($value * 1000) + 1;
    }

    public function setRangeEndAttribute($value)
    {
        $this->attributes['end_number'] = $value * 1000;
    }

    // Convert actual number to range number for display
    public function getRangeStartAttribute()
    {
        return floor($this->start_number / 1000);
    }

    public function getRangeEndAttribute()
    {
        return floor($this->end_number / 1000);
    }

    public function team(): BelongsTo
    {
        return $this->belongsTo(Team::class);
    }

    public function creator(): BelongsTo
    {
        return $this->belongsTo(User::class, 'created_by');
    }
}


Exceptions/Handler.php

---content---

<?php

namespace App\Exceptions;

use Throwable;
use BezhanSalleh\FilamentExceptions\FilamentExceptions;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;

class Handler extends ExceptionHandler
{
    /**
     * The list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            if ($this->shouldReport($e)) {
                FilamentExceptions::report($e);
            }
        });
    }
}


Policies/RolePolicy.php

---content---

<?php

namespace App\Policies;

use App\Models\User;
use Spatie\Permission\Models\Role;
use Illuminate\Auth\Access\HandlesAuthorization;

class RolePolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any models.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function viewAny(User $user): bool
    {
        return $user->hasRole('super_admin') && $user->can('view_any_shield::role');
    }

    /**
     * Determine whether the user can view the model.
     *
     * @param  \App\Models\User  $user
     * @param  \Spatie\Permission\Models\Role  $role
     * @return bool
     */
    public function view(User $user, Role $role): bool
    {
        return $user->hasRole('super_admin') && $user->can('view_shield::role');
    }

    /**
     * Determine whether the user can create models.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function create(User $user): bool
    {
        return $user->hasRole('super_admin') && $user->can('create_shield::role');
    }

    /**
     * Determine whether the user can update the model.
     *
     * @param  \App\Models\User  $user
     * @param  \Spatie\Permission\Models\Role  $role
     * @return bool
     */
    public function update(User $user, Role $role): bool
    {
        return $user->hasRole('super_admin') && $user->can('update_shield::role');
    }

    /**
     * Determine whether the user can delete the model.
     *
     * @param  \App\Models\User  $user
     * @param  \Spatie\Permission\Models\Role  $role
     * @return bool
     */
    public function delete(User $user, Role $role): bool
    {
        return $user->hasRole('super_admin') && $user->can('delete_shield::role');
    }

    /**
     * Determine whether the user can bulk delete.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function deleteAny(User $user): bool
    {
        return $user->hasRole('super_admin') && $user->can('delete_any_shield::role');
    }

    /**
     * Determine whether the user can permanently delete.
     *
     * @param  \App\Models\User  $user
     * @param  \Spatie\Permission\Models\Role  $role
     * @return bool
     */
    public function forceDelete(User $user, Role $role): bool
    {
        return $user->hasRole('super_admin') && $user->can('force_delete_shield::role');
    }

    /**
     * Determine whether the user can permanently bulk delete.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function forceDeleteAny(User $user): bool
    {
        return $user->hasRole('super_admin') && $user->can('force_delete_any_shield::role');
    }

    /**
     * Determine whether the user can restore.
     *
     * @param  \App\Models\User  $user
     * @param  \Spatie\Permission\Models\Role  $role
     * @return bool
     */
    public function restore(User $user, Role $role): bool
    {
        return $user->hasRole('super_admin') && $user->can('restore_shield::role');
    }

    /**
     * Determine whether the user can bulk restore.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function restoreAny(User $user): bool
    {
        return $user->hasRole('super_admin') && $user->can('restore_any_shield::role');
    }

    /**
     * Determine whether the user can replicate.
     *
     * @param  \App\Models\User  $user
     * @param  \Spatie\Permission\Models\Role  $role
     * @return bool
     */
    public function replicate(User $user, Role $role): bool
    {
        return $user->hasRole('super_admin') && $user->can('replicate_shield::role');
    }

    /**
     * Determine whether the user can reorder.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function reorder(User $user): bool
    {
        return $user->hasRole('super_admin') && $user->can('reorder_shield::role');
    }
}


Policies/NumberRangePolicy.php

---content---

<?php

namespace App\Policies;

use App\Models\User;
use App\Models\NumberRange;
use Illuminate\Auth\Access\HandlesAuthorization;

class NumberRangePolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can create a number range.
     */
    public function create(User $user): bool
    {
        return $user->hasRole('super_admin'); // Alleen super_admin mag aanmaken
    }

    /**
     * Determine whether the user can update the number range.
     */
    public function update(User $user, NumberRange $numberRange): bool
    {
        // Super admin mag alles
        if ($user->hasRole('super_admin')) {
            return true;
        }
    
        // Haal alle teams op waar de user team_admin van is (inclusief subteams)
        $userTeamIds = $user->teams->flatMap(fn ($team) => $team->getAllDescendants()->prepend($team->id));
    
        // Controleer of de NumberRange binnen deze teams valt
        return $user->hasRole('team_admin') && $userTeamIds->contains($numberRange->team_id);
    }

    /**
     * Determine whether the user can delete the number range.
     */public function delete(User $user, NumberRange $numberRange): bool
{
    // Super admin mag alles
    if ($user->hasRole('super_admin')) {
        return true;
    }

    // Haal alle teams op waar de user team_admin van is (inclusief subteams)
    $userTeamIds = $user->teams->flatMap(fn ($team) => $team->getAllDescendants()->prepend($team->id));

    // Controleer of de NumberRange binnen deze teams valt
    return $user->hasRole('team_admin') && $userTeamIds->contains($numberRange->team_id);
}
}

Policies/UserPolicy.php

---content---

<?php

namespace App\Policies;

use App\Models\User;

use Illuminate\Auth\Access\HandlesAuthorization;

class UserPolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any models.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function viewAny(User $user): bool
    {
        return $user->can('view_any_user');
    }

    /**
     * Determine whether the user can view the model.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function view(User $user): bool
    {
        return $user->can('view_user');
    }

    /**
     * Determine whether the user can create models.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function create(User $user): bool
    {
        return $user->can('create_user');
    }

    /**
     * Determine whether the user can update the model.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function update(User $user): bool
    {
        return $user->can('update_user');
    }

    /**
     * Determine whether the user can delete the model.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function delete(User $user): bool
    {
        return $user->can('delete_user');
    }

    /**
     * Determine whether the user can bulk delete.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function deleteAny(User $user): bool
    {
        return $user->can('delete_any_user');
    }

    /**
     * Determine whether the user can permanently delete.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function forceDelete(User $user): bool
    {
        return $user->can('force_delete_user');
    }

    /**
     * Determine whether the user can permanently bulk delete.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function forceDeleteAny(User $user): bool
    {
        return $user->can('force_delete_any_user');
    }

    /**
     * Determine whether the user can restore.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function restore(User $user): bool
    {
        return $user->can('restore_user');
    }

    /**
     * Determine whether the user can bulk restore.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function restoreAny(User $user): bool
    {
        return $user->can('restore_any_user');
    }

    /**
     * Determine whether the user can bulk restore.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function replicate(User $user): bool
    {
        return $user->can('replicate_user');
    }

    /**
     * Determine whether the user can reorder.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function reorder(User $user): bool
    {
        return $user->can('reorder_user');
    }
}


Policies/TeamPolicy.php

---content---

<?php

namespace App\Policies;

use App\Models\User;
use App\Models\Team;
use Filament\Facades\Filament;
use Illuminate\Auth\Access\HandlesAuthorization;

class TeamPolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any models.
     */
    public function viewAny(User $user): bool
    {
        return $user->can('view_any_team');
    }

    /**
     * Determine whether the user can create models.
     */
    public function create(User $user): bool
    {
        return $user->hasRole(['super_admin', 'team_admin']) && $user->can('create_team');
    }

    /**
     * Determine whether the user can view the model.
     */
    public function view(User $user, Team $team): bool
    {
        return $user->can('view_team');
    }

    /**
     * Determine whether the user can update the model.
     */
    public function update(User $user, Team $team): bool
    {
        if ($user->hasRole('super_admin')) {
            return $user->can('update_team');
        }

        return $user->can('update_team') && $team->created_by === $user->id;
    }

    /**
     * Determine whether the user can delete the model.
     */
    public function delete(User $user, Team $team): bool
    {
        if ($user->hasRole('super_admin')) {
            return $user->can('delete_team');
        }

        // Prevent deleting the currently active tenant
        if ($team->id === Filament::getTenant()->id) {
            return false;
        }

        return $user->can('delete_team') 
            && $team->created_by === $user->id;
    }

    /**
     * Determine whether the user can bulk delete.
     */
    public function deleteAny(User $user): bool
    {
        return $user->hasRole('super_admin') && $user->can('delete_any_team');
    }

    /**
     * Determine whether the user can permanently delete.
     */
    public function forceDelete(User $user, Team $team): bool
    {
        return $user->can('force_delete_team');
    }

    /**
     * Determine whether the user can permanently bulk delete.
     */
    public function forceDeleteAny(User $user): bool
    {
        return $user->can('force_delete_any_team');
    }

    /**
     * Determine whether the user can restore.
     */
    public function restore(User $user, Team $team): bool
    {
        return $user->can('restore_team');
    }

    /**
     * Determine whether the user can bulk restore.
     */
    public function restoreAny(User $user): bool
    {
        return $user->can('restore_any_team');
    }

    /**
     * Determine whether the user can replicate.
     */
    public function replicate(User $user, Team $team): bool
    {
        return $user->can('replicate_team');
    }

    /**
     * Determine whether the user can reorder.
     */
    public function reorder(User $user): bool
    {
        return $user->can('reorder_team');
    }
}


Policies/RouteStatisticPolicy.php

---content---

<?php

namespace App\Policies;

use App\Models\User;
use Bilfeldt\LaravelRouteStatistics\Models\RouteStatistic;
use Illuminate\Auth\Access\HandlesAuthorization;

class RouteStatisticPolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any models.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function viewAny(User $user): bool
    {
        return $user->can('view_any_route::statistics');
    }

    /**
     * Determine whether the user can view the model.
     *
     * @param  \App\Models\User  $user
     * @param  \Bilfeldt\LaravelRouteStatistics\Models\RouteStatistic  $routeStatistic
     * @return bool
     */
    public function view(User $user, RouteStatistic $routeStatistic): bool
    {
        return $user->can('view_route::statistics');
    }

    /**
     * Determine whether the user can create models.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function create(User $user): bool
    {
        return $user->can('create_route::statistics');
    }

    /**
     * Determine whether the user can update the model.
     *
     * @param  \App\Models\User  $user
     * @param  \Bilfeldt\LaravelRouteStatistics\Models\RouteStatistic  $routeStatistic
     * @return bool
     */
    public function update(User $user, RouteStatistic $routeStatistic): bool
    {
        return $user->can('update_route::statistics');
    }

    /**
     * Determine whether the user can delete the model.
     *
     * @param  \App\Models\User  $user
     * @param  \Bilfeldt\LaravelRouteStatistics\Models\RouteStatistic  $routeStatistic
     * @return bool
     */
    public function delete(User $user, RouteStatistic $routeStatistic): bool
    {
        return $user->can('delete_route::statistics');
    }

    /**
     * Determine whether the user can bulk delete.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function deleteAny(User $user): bool
    {
        return $user->can('delete_any_route::statistics');
    }

    /**
     * Determine whether the user can permanently delete.
     *
     * @param  \App\Models\User  $user
     * @param  \Bilfeldt\LaravelRouteStatistics\Models\RouteStatistic  $routeStatistic
     * @return bool
     */
    public function forceDelete(User $user, RouteStatistic $routeStatistic): bool
    {
        return $user->can('force_delete_route::statistics');
    }

    /**
     * Determine whether the user can permanently bulk delete.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function forceDeleteAny(User $user): bool
    {
        return $user->can('force_delete_any_route::statistics');
    }

    /**
     * Determine whether the user can restore.
     *
     * @param  \App\Models\User  $user
     * @param  \Bilfeldt\LaravelRouteStatistics\Models\RouteStatistic  $routeStatistic
     * @return bool
     */
    public function restore(User $user, RouteStatistic $routeStatistic): bool
    {
        return $user->can('restore_route::statistics');
    }

    /**
     * Determine whether the user can bulk restore.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function restoreAny(User $user): bool
    {
        return $user->can('restore_any_route::statistics');
    }

    /**
     * Determine whether the user can replicate.
     *
     * @param  \App\Models\User  $user
     * @param  \Bilfeldt\LaravelRouteStatistics\Models\RouteStatistic  $routeStatistic
     * @return bool
     */
    public function replicate(User $user, RouteStatistic $routeStatistic): bool
    {
        return $user->can('replicate_route::statistics');
    }

    /**
     * Determine whether the user can reorder.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function reorder(User $user): bool
    {
        return $user->can('reorder_route::statistics');
    }

}


Policies/ExceptionPolicy.php

---content---

<?php

namespace App\Policies;

use App\Models\User;
use BezhanSalleh\FilamentExceptions\Models\Exception;
use Illuminate\Auth\Access\HandlesAuthorization;

class ExceptionPolicy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any models.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function viewAny(User $user): bool
    {
        return $user->can('view_any_exception');
    }

    /**
     * Determine whether the user can view the model.
     *
     * @param  \App\Models\User  $user
     * @param  \BezhanSalleh\FilamentExceptions\Models\Exception  $exception
     * @return bool
     */
    public function view(User $user, Exception $exception): bool
    {
        return $user->can('view_exception');
    }

    /**
     * Determine whether the user can create models.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function create(User $user): bool
    {
        return $user->can('create_exception');
    }

    /**
     * Determine whether the user can update the model.
     *
     * @param  \App\Models\User  $user
     * @param  \BezhanSalleh\FilamentExceptions\Models\Exception  $exception
     * @return bool
     */
    public function update(User $user, Exception $exception): bool
    {
        return $user->can('update_exception');
    }

    /**
     * Determine whether the user can delete the model.
     *
     * @param  \App\Models\User  $user
     * @param  \BezhanSalleh\FilamentExceptions\Models\Exception  $exception
     * @return bool
     */
    public function delete(User $user, Exception $exception): bool
    {
        return $user->can('delete_exception');
    }

    /**
     * Determine whether the user can bulk delete.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function deleteAny(User $user): bool
    {
        return $user->can('delete_any_exception');
    }

    /**
     * Determine whether the user can permanently delete.
     *
     * @param  \App\Models\User  $user
     * @param  \BezhanSalleh\FilamentExceptions\Models\Exception  $exception
     * @return bool
     */
    public function forceDelete(User $user, Exception $exception): bool
    {
        return $user->can('force_delete_exception');
    }

    /**
     * Determine whether the user can permanently bulk delete.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function forceDeleteAny(User $user): bool
    {
        return $user->can('force_delete_any_exception');
    }

    /**
     * Determine whether the user can restore.
     *
     * @param  \App\Models\User  $user
     * @param  \BezhanSalleh\FilamentExceptions\Models\Exception  $exception
     * @return bool
     */
    public function restore(User $user, Exception $exception): bool
    {
        return $user->can('restore_exception');
    }

    /**
     * Determine whether the user can bulk restore.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function restoreAny(User $user): bool
    {
        return $user->can('restore_any_exception');
    }

    /**
     * Determine whether the user can replicate.
     *
     * @param  \App\Models\User  $user
     * @param  \BezhanSalleh\FilamentExceptions\Models\Exception  $exception
     * @return bool
     */
    public function replicate(User $user, Exception $exception): bool
    {
        return $user->can('replicate_exception');
    }

    /**
     * Determine whether the user can reorder.
     *
     * @param  \App\Models\User  $user
     * @return bool
     */
    public function reorder(User $user): bool
    {
        return $user->can('reorder_exception');
    }

}


Filament/Resources/NumberRangeResource.php

---content---

<?php

namespace App\Filament\Resources;

use App\Filament\Resources\NumberRangeResource\Pages;
use App\Models\NumberRange;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Facades\Filament;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\DB;

class NumberRangeResource extends Resource
{
    protected static ?string $model = NumberRange::class;

    protected static ?string $navigationIcon = 'heroicon-o-hashtag';

    protected static ?string $navigationGroup = 'Settings';

    protected static bool $isScopedToTenant = false;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Select::make('team_id')
                    ->relationship('team', 'name')
                    ->required()
                    ->visible(fn () => auth()->user()->can('create', NumberRange::class))
                    ->disabled(fn () => auth()->user()->hasRole('team_admin')),

                Forms\Components\Grid::make()
                    ->schema([
                        Forms\Components\TextInput::make('range_start')
                            ->label('Start Range')
                            ->required()
                            ->numeric()
                            ->minValue(0)
                            ->step(1)
                            ->disabled(fn () => !auth()->user()->hasRole('super_admin'))
                            ->hint('Example: 0 means 1-1000, 1 means 1001-2000')
                            ->helperText('Enter the starting range number'),

                        Forms\Components\TextInput::make('range_end')
                            ->label('End Range')
                            ->required()
                            ->numeric()
                            ->minValue(1)
                            ->step(1)
                            ->disabled(fn () => !auth()->user()->hasRole('super_admin'))
                            ->hint('Example: 1 means 1000, 2 means 2000')
                            ->helperText('Enter the ending range number')
                            ->rules([
                                fn ($get, $record) => function ($attribute, $value, $fail) use ($get, $record) {
                                    if ($value <= $get('range_start')) {
                                        $fail('End range must be greater than start range.');
                                        return;
                                    }

                                    // Convert range numbers naar daadwerkelijke getallen
                                    $startNumber = ($get('range_start') * 1000) + 1;
                                    $endNumber = $value * 1000;

                                    if (auth()->user()->hasRole('super_admin')) {
                                        // Super admins mogen elke range instellen, maar ze mogen niet overlappen
                                        $query = NumberRange::where(function ($query) use ($startNumber, $endNumber) {
                                            $query->where(function ($q) use ($startNumber, $endNumber) {
                                                $q->where(function ($inner) use ($startNumber) {
                                                    $inner->where('start_number', '<=', $startNumber)
                                                          ->where('end_number', '>=', $startNumber);
                                                })->orWhere(function ($inner) use ($endNumber) {
                                                    $inner->where('start_number', '<=', $endNumber)
                                                          ->where('end_number', '>=', $endNumber);
                                                })->orWhere(function ($inner) use ($startNumber, $endNumber) {
                                                    $inner->where('start_number', '>=', $startNumber)
                                                          ->where('end_number', '<=', $endNumber);
                                                });
                                            });
                                        });

                                        if ($record) {
                                            $query->where('id', '!=', $record->id);
                                        }

                                        if ($query->exists()) {
                                            $fail('This range overlaps with an existing range.');
                                        }
                                        return;
                                    }

                                    // Team admins mogen alleen sub-ranges instellen binnen een super_admin range
                                    if (auth()->user()->hasRole('team_admin')) {
                                        $userTeamIds = auth()->user()->teams->flatMap(fn ($team) => $team->getAllDescendants()->prepend($team->id));

                                        // Haal alle super_admin-ranges op
                                        $originalRanges = NumberRange::whereNull('created_by') // Alleen super_admin ranges
                                            ->get(['start_number', 'end_number']);

                                        $isWithinSuperAdminRange = $originalRanges->contains(function ($range) use ($startNumber, $endNumber) {
                                            return $range->start_number <= $startNumber && $range->end_number >= $endNumber;
                                        });

                                        if (!$isWithinSuperAdminRange) {
                                            $fail('Your range must be within an original super_admin range.');
                                            return;
                                        }

                                        // Controleer of de nieuwe range overlapt met een bestaand sub-team range
                                        $query = NumberRange::whereIn('team_id', $userTeamIds)
                                            ->where(function ($query) use ($startNumber, $endNumber) {
                                                $query->where(function ($q) use ($startNumber, $endNumber) {
                                                    $q->where(function ($inner) use ($startNumber) {
                                                        $inner->where('start_number', '<=', $startNumber)
                                                              ->where('end_number', '>=', $startNumber);
                                                    })->orWhere(function ($inner) use ($endNumber) {
                                                        $inner->where('start_number', '<=', $endNumber)
                                                              ->where('end_number', '>=', $endNumber);
                                                    })->orWhere(function ($inner) use ($startNumber, $endNumber) {
                                                        $inner->where('start_number', '>=', $startNumber)
                                                              ->where('end_number', '<=', $endNumber);
                                                    });
                                                });
                                            });

                                        if ($record) {
                                            $query->where('id', '!=', $record->id);
                                        }

                                        if ($query->exists()) {
                                            $fail('This range overlaps with an existing sub-team range.');
                                        }
                                    }
                                },
                            ]),
                    ])->columns(2),

                Forms\Components\TextInput::make('description')
                    ->maxLength(255),

                Forms\Components\Placeholder::make('actual_range')
                    ->label('Actual Number Range')
                    ->content(function ($get) {
                        if ($get('range_start') !== null && $get('range_end') !== null) {
                            $start = ($get('range_start') * 1000) + 1;
                            $end = $get('range_end') * 1000;
                            return number_format($start) . ' - ' . number_format($end);
                        }
                        return 'Enter range values to see actual numbers';
                    }),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('team.name')
                    ->searchable(),
                Tables\Columns\TextColumn::make('start_number')
                    ->label('Start Number')
                    ->formatStateUsing(fn ($record) => number_format($record->start_number))
                    ->sortable(),
                Tables\Columns\TextColumn::make('end_number')
                    ->label('End Number')
                    ->formatStateUsing(fn ($record) => number_format($record->end_number))
                    ->sortable(),
                Tables\Columns\TextColumn::make('description')
                    ->searchable(),
                Tables\Columns\TextColumn::make('creator.name')
                    ->label('Created By'),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime(),
            ])
            ->actions([
                Tables\Actions\EditAction::make()
                    ->visible(fn (NumberRange $record) => auth()->user()->can('update', $record)),
    
                Tables\Actions\DeleteAction::make()
                    ->visible(fn (NumberRange $record) => auth()->user()->can('delete', $record)),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make()
                        ->visible(fn () => auth()->user()->hasRole('super_admin')),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListNumberRanges::route('/'),
            'create' => Pages\CreateNumberRange::route('/create'),
            'edit' => Pages\EditNumberRange::route('/{record}/edit'),
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        $query = parent::getEloquentQuery();

        if (auth()->user()->hasRole('super_admin')) {
            return $query;
        }

        $userTeamIds = auth()->user()->teams->flatMap(fn ($team) => $team->getAllDescendants()->prepend($team->id));

        return $query->whereIn('team_id', $userTeamIds);
    }
}


Filament/Resources/UserResource.php

---content---

<?php

namespace App\Filament\Resources;

use Filament\Forms;
use App\Models\User;
use Filament\Tables;
use App\Models\Team;
use Filament\Forms\Form;
use Filament\Tables\Table;
use Filament\Resources\Resource;
use Illuminate\Database\Eloquent\Builder;
use App\Filament\Resources\UserResource\Pages;
use Illuminate\Support\Str;
use Filament\Facades\Filament;
use STS\FilamentImpersonate\Tables\Actions\Impersonate;

class UserResource extends Resource
{
    protected static ?string $model = User::class;

    protected static ?string $navigationIcon = 'heroicon-o-lock-closed';

    protected static bool $isScopedToTenant = false;

    public static function getNavigationGroup(): ?string
    {
        return __('filament-shield::filament-shield.nav.group');
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make(__('User'))
                    ->schema([
                        Forms\Components\TextInput::make('name')
                            ->required()
                            ->maxLength(255),
                        Forms\Components\TextInput::make('email')
                            ->email()
                            ->required()
                            ->maxLength(255),
                        Forms\Components\TextInput::make('password')
                            ->password()
                            ->dehydrated(fn ($state) => filled($state))
                            ->required(fn (string $context): bool => $context === 'create')
                            ->maxLength(255),
                        Forms\Components\Select::make('roles')
                            ->relationship('roles', 'name', function($query) {
                                if(auth()->user()->hasRole('super_admin')) {
                                    return $query;
                                }
                                return $query->where('name', 'team_member');
                            })
                            ->multiple()
                            ->preload()
                            ->searchable()
                            ->visible(fn () => auth()->user()->hasRole(['super_admin', 'team_admin'])),
                    ])->columns(2),
                Forms\Components\Section::make(__('Tenant'))
                    ->description('Select an existing team or create a new one.')
                    ->schema([
                        Forms\Components\Grid::make()
                            ->schema([
                                Forms\Components\Select::make('teams')
                                    ->label('Existing Teams')
                                    ->relationship('teams', 'name', function($query) {
                                        if(auth()->user()->hasRole('super_admin')) {
                                            return $query;
                                        }
                                        return $query->whereIn('teams.id', auth()->user()->teams->pluck('id'));
                                    })
                                    ->multiple()
                                    ->preload()
                                    ->searchable(),
                                
                                Forms\Components\Toggle::make('create_new_team')
                                    ->label('Create New Team')
                                    ->reactive()
                                    ->visible(fn () => auth()->user()->hasRole('super_admin'))
                                    ->dehydrated(false), // Add this line
                                
                                Forms\Components\TextInput::make('new_team_name')
                                    ->label('New Team Name')
                                    ->visible(fn (callable $get) => $get('create_new_team'))
                                    ->required(fn (callable $get) => $get('create_new_team'))
                                    ->unique(Team::class, 'name')
                                    ->rules(['required_if:create_new_team,true'])
                                    ->afterStateUpdated(function ($state, callable $set) {
                                        $set('new_team_slug', Str::slug($state));
                                    })
                                    ->dehydrated(false), // Add this line
                                
                                Forms\Components\TextInput::make('new_team_slug')
                                    ->label('Team Slug')
                                    ->visible(fn (callable $get) => $get('create_new_team'))
                                    ->disabled()
                                    ->dehydrated(false), // Add this line
                            ]),
                    ]),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('name')
                    ->searchable(),
                Tables\Columns\TextColumn::make('email'),
                Tables\Columns\TextColumn::make('roles.name')
                    ->badge()
                    ->label(__('Role'))
                    ->colors(['primary'])
                    ->searchable(),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime(),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime(),
            ])
            ->filters([
                //
            ])
            ->actions([
                Impersonate::make()->visible(fn ($record) => auth()->user()->hasRole('super_admin')),
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ]);
    }

    public static function getEloquentQuery(): Builder
    {
        $query = parent::getEloquentQuery();
    
        // Super admin can see all users
        if (auth()->user()->hasRole('super_admin')) {
            return $query;
        }
    
        // Team admin can see users in their teams except super admins
        if (auth()->user()->hasRole('team_admin')) {
            $teamIds = auth()->user()->teams->pluck('id');
            return $query
                ->whereDoesntHave('roles', fn ($q) => $q->where('name', 'super_admin'))
                ->whereHas('teams', function ($query) use ($teamIds) {
                    $query->whereIn('teams.id', $teamIds);
                })
                ->where('users.id', '!=', auth()->id());
        }
    
        // Team members can see other users in their teams except super admins
        if (auth()->user()->hasRole('team_member')) {
            if (Filament::getTenant()) {
                return $query
                    ->whereDoesntHave('roles', fn ($q) => $q->where('name', 'super_admin'))
                    ->whereHas('teams', function ($query) {
                        $query->where('teams.id', Filament::getTenant()->id);
                    });
            }
        }
    
        // Default: users can only see themselves
        return $query->where('users.id', auth()->id());
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUsers::route('/'),
            'create' => Pages\CreateUser::route('/create'),
            'edit' => Pages\EditUser::route('/{record}/edit'),
        ];
    }

    protected function mutateFormDataBeforeCreate(array $data): array
    {
        // Zorg ervoor dat team_member rol automatisch wordt toegewezen bij het aanmaken door team_admin
        if (auth()->user()->hasRole('team_admin') && !isset($data['roles'])) {
            $teamMemberRole = \Spatie\Permission\Models\Role::where('name', 'team_member')->first();
            if ($teamMemberRole) {
                $data['roles'] = [$teamMemberRole->id];
            }
        }

        return $data;
    }
}


Filament/Resources/TeamResource.php

---content---

<?php

namespace App\Filament\Resources;

use App\Filament\Resources\TeamResource\Pages;
use App\Filament\Resources\TeamResource\RelationManagers;
use App\Models\Team;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Facades\Filament;
use Illuminate\Database\Eloquent\Builder;
use App\Rules\ValidTeamHierarchy;

class TeamResource extends Resource
{
    protected static ?string $model = Team::class;

    protected static ?string $navigationLabel = 'Teams';

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-group';

    protected static bool $isScopedToTenant = false;

    public static function getNavigationGroup(): ?string
    {
        return __('filament-shield::filament-shield.nav.group');
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Team Details')
                    ->schema([
                        Forms\Components\TextInput::make('name')
                            ->required()
                            ->maxLength(255)
                            ->unique(ignorable: fn ($record) => $record),
                        Forms\Components\TextInput::make('description')
                            ->maxLength(255),
                        Forms\Components\Select::make('parent_id')
                            ->label('Parent Team')
                            ->relationship('parent', 'name')
                            ->searchable()
                            ->preload()
                            ->visible(fn () => auth()->user()->hasRole('super_admin'))
                            ->rules([
                                fn ($get) => new ValidTeamHierarchy($get('id')),
                            ]),
                        Forms\Components\Select::make('type')
                            ->label('Team Type')
                            ->options([
                                'department' => 'Department',
                                'division' => 'Division',
                                'team' => 'Team',
                                'unit' => 'Unit',
                            ])
                            ->default('team')
                            ->required(),
                        Forms\Components\Toggle::make('is_active')
                            ->label('Active')
                            ->default(true),
                    ])->columns(2),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('name')
                    ->searchable(),
                Tables\Columns\TextColumn::make('full_hierarchy')
                    ->label('Hierarchy')
                    ->searchable(),
                Tables\Columns\TextColumn::make('type')
                    ->badge(),
                Tables\Columns\IconColumn::make('is_active')
                    ->boolean(),
                Tables\Columns\TextColumn::make('createdBy.name')
                    ->label('Created By')
                    ->visible(fn () => auth()->user()->hasRole('super_admin')),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('type')
                    ->options([
                        'department' => 'Department',
                        'division' => 'Division',
                        'team' => 'Team',
                        'unit' => 'Unit',
                    ]),
                Tables\Filters\TernaryFilter::make('is_active')
                    ->label('Active'),
            ])
            ->actions([
                Tables\Actions\EditAction::make()
                    ->visible(fn (Team $record) =>
                        auth()->user()->hasRole('super_admin') ||
                        $record->created_by === auth()->id()
                    ),
                Tables\Actions\DeleteAction::make()
                    ->visible(fn (Team $record) =>
                        auth()->user()->hasRole('super_admin') ||
                        ($record->created_by === auth()->id() && $record->id !== Filament::getTenant()->id)
                    ),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make()
                        ->visible(fn () => auth()->user()->hasRole('super_admin')),
                ]),
            ]);
    }

    public static function getEloquentQuery(): Builder
    {
        $query = parent::getEloquentQuery();

        // Super admin can see all teams
        if (auth()->user()->hasRole('super_admin')) {
            return $query;
        }

        // Team admin can see their teams and teams they created
        if (auth()->user()->hasRole('team_admin')) {
            return $query->where(function ($query) {
                $query->whereIn('id', auth()->user()->teams->pluck('id'))
                    ->orWhere('created_by', auth()->id());
            });
        }

        // Team members can only see teams they belong to
        return $query->whereHas('users', function ($query) {
            $query->where('users.id', auth()->user()->id);
        });
    }

    public static function getRelations(): array
    {
        return [
            RelationManagers\UsersRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListTeams::route('/'),
            'create' => Pages\CreateTeam::route('/create'),
            'edit' => Pages\EditTeam::route('/{record}/edit'),
        ];
    }

    public static function shouldRegisterNavigation(): bool
    {
        return auth()->user()->hasRole(['super_admin', 'team_admin']);
    }
}


Filament/Resources/Shield/RoleResource.php

---content---

<?php

namespace App\Filament\Resources\Shield;

use BezhanSalleh\FilamentShield\Contracts\HasShieldPermissions;
use BezhanSalleh\FilamentShield\Facades\FilamentShield;
use BezhanSalleh\FilamentShield\FilamentShieldPlugin;
use App\Filament\Resources\Shield\RoleResource\Pages;
use BezhanSalleh\FilamentShield\Support\Utils;
use Filament\Forms;
use Filament\Forms\Components\Component;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Collection;
use Illuminate\Support\HtmlString;
use Illuminate\Support\Str;

class RoleResource extends Resource implements HasShieldPermissions
{
    protected static ?string $recordTitleAttribute = 'name';

    protected static $permissionsCollection;

    public static function getPermissionPrefixes(): array
    {
        return [
            'view',
            'view_any',
            'create',
            'update',
            'delete',
            'delete_any',
        ];
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Grid::make()
                    ->schema([
                        Forms\Components\Section::make()
                            ->schema([
                                Forms\Components\TextInput::make('name')
                                    ->label(__('filament-shield::filament-shield.field.name'))
                                    ->unique(ignoreRecord: true)
                                    ->required()
                                    ->maxLength(255),
                                Forms\Components\TextInput::make('guard_name')
                                    ->label(__('filament-shield::filament-shield.field.guard_name'))
                                    ->default(Utils::getFilamentAuthGuard())
                                    ->nullable()
                                    ->maxLength(255),
                                \BezhanSalleh\FilamentShield\Forms\ShieldSelectAllToggle::make('select_all')
                                    ->onIcon('heroicon-s-shield-check')
                                    ->offIcon('heroicon-s-shield-exclamation')
                                    ->label(__('filament-shield::filament-shield.field.select_all.name'))
                                    ->helperText(fn (): HtmlString => new HtmlString(__('filament-shield::filament-shield.field.select_all.message')))
                                    ->dehydrated(fn ($state): bool => $state),

                            ])
                            ->columns([
                                'sm' => 2,
                                'lg' => 3,
                            ]),
                    ]),
                Forms\Components\Tabs::make('Permissions')
                    ->contained()
                    ->tabs([
                        Forms\Components\Tabs\Tab::make(__('filament-shield::filament-shield.resources'))
                            ->visible(fn (): bool => (bool) Utils::isResourceEntityEnabled())
                            ->badge(static::getResourceTabBadgeCount())
                            ->schema([
                                Forms\Components\Grid::make()
                                    ->schema(static::getResourceEntitiesSchema())
                                    ->columns(FilamentShieldPlugin::get()->getGridColumns()),
                            ]),
                        static::getTabFormComponentForPage(),
                        static::getTabFormComponentForWidget(),
                        static::getTabFormComponentForCustomPermissions(),
                    ])
                    ->columnSpan('full'),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('name')
                    ->badge()
                    ->label(__('filament-shield::filament-shield.column.name'))
                    ->formatStateUsing(fn ($state): string => Str::headline($state))
                    ->colors(['primary'])
                    ->searchable(),
                Tables\Columns\TextColumn::make('guard_name')
                    ->badge()
                    ->label(__('filament-shield::filament-shield.column.guard_name')),
                Tables\Columns\TextColumn::make('permissions_count')
                    ->badge()
                    ->label(__('filament-shield::filament-shield.column.permissions'))
                    ->counts('permissions')
                    ->colors(['success']),
                Tables\Columns\TextColumn::make('updated_at')
                    ->label(__('filament-shield::filament-shield.column.updated_at'))
                    ->dateTime(),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\DeleteBulkAction::make(),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListRoles::route('/'),
            'create' => Pages\CreateRole::route('/create'),
            'view' => Pages\ViewRole::route('/{record}'),
            'edit' => Pages\EditRole::route('/{record}/edit'),
        ];
    }

    public static function getModel(): string
    {
        return Utils::getRoleModel();
    }

    public static function getModelLabel(): string
    {
        return __('filament-shield::filament-shield.resource.label.role');
    }

    public static function getPluralModelLabel(): string
    {
        return __('filament-shield::filament-shield.resource.label.roles');
    }

    public static function shouldRegisterNavigation(): bool
    {
        return auth()->check() && auth()->user()->hasRole('super_admin');
    }

    public static function getNavigationGroup(): ?string
    {
        return auth()->check() && auth()->user()->hasRole('super_admin')
            ? __('filament-shield::filament-shield.nav.group')
            : null;
    }

    public static function getNavigationLabel(): string
    {
        return __('filament-shield::filament-shield.nav.role.label');
    }

    public static function getNavigationIcon(): string
    {
        return __('filament-shield::filament-shield.nav.role.icon');
    }

    public static function getNavigationSort(): ?int
    {
        return Utils::getResourceNavigationSort();
    }

    public static function getSlug(): string
    {
        return Utils::getResourceSlug();
    }

    public static function getNavigationBadge(): ?string
    {
        return Utils::isResourceNavigationBadgeEnabled()
            ? static::getModel()::count()
            : null;
    }

    public static function isScopedToTenant(): bool
    {
        return Utils::isScopedToTenant();
    }

    public static function canGloballySearch(): bool
    {
        return Utils::isResourceGloballySearchable() && count(static::getGloballySearchableAttributes()) && static::canViewAny();
    }

    public static function getResourceEntitiesSchema(): ?array
    {
        static::$permissionsCollection = static::$permissionsCollection ?: Utils::getPermissionModel()::all();

        return collect(FilamentShield::getResources())
            ->sortKeys()
            ->map(function ($entity) {
                return Forms\Components\Section::make(FilamentShield::getLocalizedResourceLabel($entity['fqcn']))
                    ->description(fn () => new HtmlString('<span style="word-break: break-word;">' . Utils::showModelPath($entity['fqcn']) . '</span>'))
                    ->compact()
                    ->schema([
                        static::getCheckBoxListComponentForResource($entity),
                    ])
                    ->columnSpan(FilamentShieldPlugin::get()->getSectionColumnSpan())
                    ->collapsible();
            })
            ->toArray();
    }

    public static function getResourceTabBadgeCount(): ?int
    {
        return collect(FilamentShield::getResources())
            ->map(fn ($resource) => count(static::getResourcePermissionOptions($resource)))
            ->sum();
    }

    public static function getResourcePermissionOptions(array $entity): array
    {
        return collect(Utils::getResourcePermissionPrefixes($entity['fqcn']))
            ->flatMap(fn ($permission) => [
                $permission . '_' . $entity['resource'] => FilamentShield::getLocalizedResourcePermissionLabel($permission),
            ])
            ->toArray();
    }

    public static function setPermissionStateForRecordPermissions(Component $component, string $operation, array $permissions, ?Model $record): void
    {

        if (in_array($operation, ['edit', 'view'])) {

            if (blank($record)) {
                return;
            }
            if ($component->isVisible() && count($permissions) > 0) {
                $component->state(
                    collect($permissions)
                        /** @phpstan-ignore-next-line */
                        ->filter(fn ($value, $key) => $record->checkPermissionTo($key))
                        ->keys()
                        ->toArray()
                );
            }
        }
    }

    public static function getPageOptions(): array
    {
        return collect(FilamentShield::getPages())
            ->flatMap(fn ($page) => [
                $page['permission'] => FilamentShield::getLocalizedPageLabel($page['class']),
            ])
            ->toArray();
    }

    public static function getWidgetOptions(): array
    {
        return collect(FilamentShield::getWidgets())
            ->flatMap(fn ($widget) => [
                $widget['permission'] => FilamentShield::getLocalizedWidgetLabel($widget['class']),
            ])
            ->toArray();
    }

    public static function getCustomPermissionOptions(): array
    {
        return collect(static::getCustomEntities())
            ->flatMap(fn ($customPermission) => [
                $customPermission => str($customPermission)->headline()->toString(),
            ])
            ->toArray();
    }

    protected static function getCustomEntities(): ?Collection
    {
        $resourcePermissions = collect();
        collect(FilamentShield::getResources())->each(function ($entity) use ($resourcePermissions) {
            collect(Utils::getResourcePermissionPrefixes($entity['fqcn']))->map(function ($permission) use ($resourcePermissions, $entity) {
                $resourcePermissions->push((string) Str::of($permission . '_' . $entity['resource']));
            });
        });

        $entitiesPermissions = $resourcePermissions
            ->merge(collect(FilamentShield::getPages())->map(fn ($page) => $page['permission'])->values())
            ->merge(collect(FilamentShield::getWidgets())->map(fn ($widget) => $widget['permission'])->values())
            ->values();

        return static::$permissionsCollection->whereNotIn('name', $entitiesPermissions)->pluck('name');
    }

    public static function getCheckBoxListComponentForResource(array $entity): Component
    {
        $permissionsArray = static::getResourcePermissionOptions($entity);

        return static::getCheckboxListFormComponent($entity['resource'], $permissionsArray, false);
    }

    public static function getTabFormComponentForPage(): Component
    {
        $options = static::getPageOptions();
        $count = count($options);

        return Forms\Components\Tabs\Tab::make(__('filament-shield::filament-shield.pages'))
            ->visible(fn (): bool => (bool) Utils::isPageEntityEnabled() && $count > 0)
            ->badge($count)
            ->schema([
                static::getCheckboxListFormComponent('pages_tab', $options)
            ]);
    }

    public static function getTabFormComponentForWidget(): Component
    {
        $options = static::getWidgetOptions();
        $count = count($options);

        return Forms\Components\Tabs\Tab::make(__('filament-shield::filament-shield.widgets'))
            ->visible(fn (): bool => (bool) Utils::isWidgetEntityEnabled() && $count > 0)
            ->badge($count)
            ->schema([
                static::getCheckboxListFormComponent('widgets_tab', $options)
            ]);
    }

    public static function getTabFormComponentForCustomPermissions(): Component
    {
        $options = static::getCustomPermissionOptions();
        $count = count($options);

        return Forms\Components\Tabs\Tab::make(__('filament-shield::filament-shield.custom'))
            ->visible(fn (): bool => (bool) Utils::isCustomPermissionEntityEnabled() && $count > 0)
            ->badge($count)
            ->schema([
                static::getCheckboxListFormComponent('custom_permissions', $options),
            ]);
    }

    public static function getCheckboxListFormComponent(string $name, array $options, bool $searchable = true): Component
    {
        return Forms\Components\CheckboxList::make($name)
            ->label('')
            ->options(fn (): array => $options)
            ->searchable($searchable)
            ->afterStateHydrated(
                fn (Component $component, string $operation, ?Model $record) => static::setPermissionStateForRecordPermissions(
                    component: $component,
                    operation: $operation,
                    permissions: $options,
                    record: $record
                )
            )
            ->dehydrated(fn ($state) => ! blank($state))
            ->bulkToggleable()
            ->gridDirection('row')
            ->columns(FilamentShieldPlugin::get()->getCheckboxListColumns())
            ->columnSpan(FilamentShieldPlugin::get()->getCheckboxListColumnSpan());
    }

    public static function canAccess(): bool
    {
        return auth()->check() && auth()->user()->hasRole('super_admin');
    }
}


Filament/Resources/Shield/RoleResource/Pages/EditRole.php

---content---

<?php

namespace App\Filament\Resources\Shield\RoleResource\Pages;

use App\Filament\Resources\Shield\RoleResource;
use BezhanSalleh\FilamentShield\Support\Utils;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Support\Arr;
use Illuminate\Support\Collection;

class EditRole extends EditRecord
{
    protected static string $resource = RoleResource::class;

    public Collection $permissions;

    protected function getActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }

    protected function mutateFormDataBeforeSave(array $data): array
    {
        $this->permissions = collect($data)
            ->filter(function ($permission, $key) {
                return ! in_array($key, ['name', 'guard_name', 'select_all']);
            })
            ->values()
            ->flatten()
            ->unique();

        return Arr::only($data, ['name', 'guard_name']);
    }

    protected function afterSave(): void
    {
        $permissionModels = collect();
        $this->permissions->each(function ($permission) use ($permissionModels) {
            $permissionModels->push(Utils::getPermissionModel()::firstOrCreate([
                'name' => $permission,
                'guard_name' => $this->data['guard_name'],
            ]));
        });

        $this->record->syncPermissions($permissionModels);
    }
}


Filament/Resources/Shield/RoleResource/Pages/ViewRole.php

---content---

<?php

namespace App\Filament\Resources\Shield\RoleResource\Pages;

use App\Filament\Resources\Shield\RoleResource;
use Filament\Actions;
use Filament\Resources\Pages\ViewRecord;

class ViewRole extends ViewRecord
{
    protected static string $resource = RoleResource::class;

    protected function getActions(): array
    {
        return [
            Actions\EditAction::make(),
        ];
    }
}


Filament/Resources/Shield/RoleResource/Pages/ListRoles.php

---content---

<?php

namespace App\Filament\Resources\Shield\RoleResource\Pages;

use App\Filament\Resources\Shield\RoleResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListRoles extends ListRecords
{
    protected static string $resource = RoleResource::class;

    protected function getActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


Filament/Resources/Shield/RoleResource/Pages/CreateRole.php

---content---

<?php

namespace App\Filament\Resources\Shield\RoleResource\Pages;

use App\Filament\Resources\Shield\RoleResource;
use BezhanSalleh\FilamentShield\Support\Utils;
use Filament\Resources\Pages\CreateRecord;
use Illuminate\Support\Arr;
use Illuminate\Support\Collection;

class CreateRole extends CreateRecord
{
    protected static string $resource = RoleResource::class;

    public Collection $permissions;

    protected function mutateFormDataBeforeCreate(array $data): array
    {
        $this->permissions = collect($data)
            ->filter(function ($permission, $key) {
                return ! in_array($key, ['name', 'guard_name', 'select_all']);
            })
            ->values()
            ->flatten()
            ->unique();

        return Arr::only($data, ['name', 'guard_name']);
    }

    protected function afterCreate(): void
    {
        $permissionModels = collect();
        $this->permissions->each(function ($permission) use ($permissionModels) {
            $permissionModels->push(Utils::getPermissionModel()::firstOrCreate([
                /** @phpstan-ignore-next-line */
                'name' => $permission,
                'guard_name' => $this->data['guard_name'],
            ]));
        });

        $this->record->syncPermissions($permissionModels);
    }
}


Filament/Resources/UserResource/Pages/ListUsers.php

---content---

<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;


class ListUsers extends ListRecords
{
    protected static string $resource = UserResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


Filament/Resources/UserResource/Pages/EditUser.php

---content---

<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Filament\Resources\UserResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;
use STS\FilamentImpersonate\Pages\Actions\Impersonate;

class EditUser extends EditRecord
{
    protected static string $resource = UserResource::class;

    protected function mutateFormDataBeforeSave(array $data): array
    {
        // Only save user-related fields
        return [
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => !empty($data['password']) ? $data['password'] : $this->record->password,
        ];
    }

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
            Impersonate::make()->record($this->getRecord()) 
        ];
    }

    protected function getRedirectUrl(): string
    {
        return $this->getResource()::getUrl('index');
    }
}

Filament/Resources/UserResource/Pages/CreateUser.php

---content---

<?php

namespace App\Filament\Resources\UserResource\Pages;

use App\Models\Team;
use App\Filament\Resources\UserResource;
use Filament\Resources\Pages\CreateRecord;

class CreateUser extends CreateRecord
{
    protected static string $resource = UserResource::class;

    protected function mutateFormDataBeforeCreate(array $data): array
    {
        // Filter alleen de user-gerelateerde velden
        return [
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => $data['password'],
        ];
    }

    protected function afterCreate(): void
    {
        $user = $this->record;
        
        // Koppel bestaande teams
        if (!empty($this->data['teams'])) {
            $user->teams()->attach($this->data['teams']);
        }

        // Maak en koppel nieuw team
        if (!empty($this->data['create_new_team']) && !empty($this->data['new_team_name'])) {
            $team = Team::create([
                'name' => $this->data['new_team_name'],
                'slug' => $this->data['new_team_slug'],
                'created_by' => auth()->id(),
            ]);
            
            $user->teams()->attach($team->id);
        }
    }

    protected function getRedirectUrl(): string
    {
        return $this->getResource()::getUrl('index');
    }
}


Filament/Resources/TeamResource/RelationManagers/UsersRelationManager.php

---content---

<?php

namespace App\Filament\Resources\TeamResource\RelationManagers;

use Filament\Forms;
use Filament\Tables;
use Filament\Forms\Form;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Filament\Resources\RelationManagers\RelationManager;

class UsersRelationManager extends RelationManager
{
    protected static string $relationship = 'users';

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\TextInput::make('name')
                    ->required()
                    ->maxLength(255),
                Forms\Components\TextInput::make('email')
                    ->email()
                    ->required()
                    ->maxLength(255),
                Forms\Components\TextInput::make('password')
                    ->password()
                    ->dehydrated(fn ($state) => filled($state))
                    ->required(fn (string $context): bool => $context === 'create')
                    ->maxLength(255),
                // Alleen super_admin kan roles toewijzen
                Forms\Components\Select::make('roles')
                    ->relationship('roles', 'name', function($query) {
                        if(auth()->user()->hasRole('super_admin')) {
                            return $query;
                        }
                        // Team admin kan alleen team_member rol toewijzen
                        return $query->where('name', 'team_member');
                    })
                    ->multiple()
                    ->preload()
                    ->searchable()
                    ->visible(fn () => auth()->user()->hasRole(['super_admin', 'team_admin'])),
            ]);
    }

    public function table(Table $table): Table
    {
        return $table
            ->modifyQueryUsing(function (Builder $query) {
                // If not super_admin, exclude super_admin users
                if (!auth()->user()->hasRole('super_admin')) {
                    $query->whereDoesntHave('roles', fn ($q) => $q->where('name', 'super_admin'));
                }
                return $query;
            })
            ->columns([
                Tables\Columns\TextColumn::make('name'),
                Tables\Columns\TextColumn::make('email'),
                Tables\Columns\TextColumn::make('roles.name')
                    ->badge()
                    ->label(__('Role'))
                    ->colors(['primary'])
                    ->searchable(),
            ])
            ->filters([
                //
            ])
            ->headerActions([
                Tables\Actions\CreateAction::make(),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    protected function mutateFormDataBeforeCreate(array $data): array
    {
        // Zorg ervoor dat team_member rol automatisch wordt toegewezen bij het aanmaken door team_admin
        if (auth()->user()->hasRole('team_admin') && !isset($data['roles'])) {
            $teamMemberRole = \Spatie\Permission\Models\Role::where('name', 'team_member')->first();
            if ($teamMemberRole) {
                $data['roles'] = [$teamMemberRole->id];
            }
        }

        // Koppel de gebruiker aan het team
        $data['teams'] = [$this->ownerRecord->id];

        return $data;
    }
}

Filament/Resources/TeamResource/Pages/EditTeam.php

---content---

<?php

namespace App\Filament\Resources\TeamResource\Pages;

use App\Filament\Resources\TeamResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditTeam extends EditRecord
{
    protected static string $resource = TeamResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }

    protected function getRedirectUrl(): string
    {
        return $this->getResource()::getUrl('index');
    }
}


Filament/Resources/TeamResource/Pages/ListTeams.php

---content---

<?php

namespace App\Filament\Resources\TeamResource\Pages;

use App\Filament\Resources\TeamResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListTeams extends ListRecords
{
    protected static string $resource = TeamResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


Filament/Resources/TeamResource/Pages/CreateTeam.php

---content---

<?php

namespace App\Filament\Resources\TeamResource\Pages;

use App\Models\Team;
use App\Models\User;
use Filament\Actions;
use App\Traits\GenerateSlug;
use App\Filament\Resources\TeamResource;
use Filament\Resources\Pages\CreateRecord;

class CreateTeam extends CreateRecord
{
    use GenerateSlug;
    
    protected static string $resource = TeamResource::class;

    protected function mutateFormDataBeforeCreate(array $data): array
    {
        $data['slug'] = $this->generateSlug($data['name'], 'teams');
        $data['created_by'] = auth()->id();

        return $data;
    }

    protected function getRedirectUrl(): string
    {
        return $this->getResource()::getUrl('index');
    }

    protected function afterCreate(): void
    {
        $this->record->users()->attach(auth()->user());
    }
}


Filament/Resources/NumberRangeResource/Pages/ListNumberRanges.php

---content---

<?php

namespace App\Filament\Resources\NumberRangeResource\Pages;

use App\Filament\Resources\NumberRangeResource;
use Filament\Actions;
use Filament\Resources\Pages\ListRecords;

class ListNumberRanges extends ListRecords
{
    protected static string $resource = NumberRangeResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}


Filament/Resources/NumberRangeResource/Pages/EditNumberRange.php

---content---

<?php

namespace App\Filament\Resources\NumberRangeResource\Pages;

use App\Filament\Resources\NumberRangeResource;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;

class EditNumberRange extends EditRecord
{
    protected static string $resource = NumberRangeResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\DeleteAction::make(),
        ];
    }
}


Filament/Resources/NumberRangeResource/Pages/CreateNumberRange.php

---content---

<?php

namespace App\Filament\Resources\NumberRangeResource\Pages;

use App\Filament\Resources\NumberRangeResource;
use Filament\Facades\Filament;
use Filament\Resources\Pages\CreateRecord;

class CreateNumberRange extends CreateRecord
{
    protected static string $resource = NumberRangeResource::class;

    protected function mutateFormDataBeforeCreate(array $data): array
    {
        $data['created_by'] = auth()->id();
        
        // Team admin mag alleen NumberRanges maken voor zijn eigen team
        if (auth()->user()->hasRole('team_admin')) {
            $data['team_id'] = Filament::getTenant()?->id ?? auth()->user()->teams->first()->id;
        }
    
        return $data;
    }
}

Filament/Pages/CreateTeamAdmin.php

---content---

<?php

namespace App\Filament\Pages;

use App\Models\Team;
use App\Models\User;
use Filament\Forms\Get;
use Filament\Forms\Form;
use Filament\Pages\Page;
use App\Models\NumberRange;
use Illuminate\Support\Str;
use Filament\Forms\Components\Grid;
use Filament\Forms\Components\Section;
use Filament\Forms\Contracts\HasForms;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Repeater;
use Spatie\Permission\Models\Role;
use Illuminate\Support\Facades\Hash;
use Filament\Forms\Components\Wizard;
use Filament\Notifications\Notification;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Components\Actions\Action;

class CreateTeamAdmin extends Page implements HasForms
{
    use InteractsWithForms;

    protected static string $view = 'filament.pages.create-team-admin';
    protected static ?string $navigationIcon = 'heroicon-o-user-plus';
    protected static ?string $navigationLabel = 'Create Team Admin';
    protected static ?string $navigationGroup = 'User Management';
    protected static ?string $title = 'Create New Team Admin';

    public ?array $data = [];

    public function mount(): void
    {
        $this->form->fill();
    }

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Wizard::make([
                    Wizard\Step::make('Team Admin Details')
                        ->schema([
                            Section::make('User Information')
                                ->schema([
                                    TextInput::make('user.name')
                                        ->label('Name')
                                        ->required()
                                        ->maxLength(255),
                                    TextInput::make('user.email')
                                        ->label('Email')
                                        ->email()
                                        ->required()
                                        ->unique(User::class, 'email'),
                                    TextInput::make('user.password')
                                        ->label('Password')
                                        ->password()
                                        ->required()
                                        ->minLength(8),
                                ])->columns(2),
                        ]),

                    Wizard\Step::make('Team Details')
                        ->schema([
                            Section::make('Team Information')
                                ->schema([
                                    TextInput::make('team.name')
                                        ->label('Team Name')
                                        ->required()
                                        ->maxLength(255)
                                        ->unique(Team::class, 'name'),
                                    TextInput::make('team.description')
                                        ->label('Team Description')
                                        ->maxLength(255),
                                ]),
                        ]),

                    Wizard\Step::make('Number Ranges')
                        ->schema([
                            Repeater::make('ranges')
                                ->schema([
                                    TextInput::make('start_number')
                                        ->label('Start Number')
                                        ->required()
                                        ->numeric()
                                        ->minValue(1),
                                    TextInput::make('end_number')
                                        ->label('End Number')
                                        ->required()
                                        ->numeric()
                                        ->minValue(1),
                                    TextInput::make('description')
                                        ->label('Range Description')
                                        ->maxLength(255),
                                ])
                                ->defaultItems(1)
                                ->minItems(1)
                                ->columns(3),
                        ]),
                ])
                ->submitAction(
                    Action::make('create')
                        ->label('Create Team Admin')
                        ->submit('create')
                        ->color('primary')
                )
            ])
            ->statePath('data');
    }

    public function create()
    {
        $state = $this->form->getState();

        try {
            \DB::beginTransaction();

            // Create User
            $user = User::create([
                'name' => $state['user']['name'],
                'email' => $state['user']['email'],
                'password' => Hash::make($state['user']['password']),
            ]);

            // Assign Role
            $teamAdminRole = Role::where('name', 'team_admin')->firstOrFail();
            $user->assignRole($teamAdminRole);

            // Create Team
            $team = Team::create([
                'name' => $state['team']['name'],
                'description' => $state['team']['description'],
                'slug' => Str::slug($state['team']['name']),
                'created_by' => auth()->id(),
            ]);

            // Attach User to Team
            $team->users()->attach($user->id);

            // Create Number Ranges
            foreach ($state['ranges'] as $range) {
                // Validate range
                if ($range['end_number'] <= $range['start_number']) {
                    throw new \Exception('End number must be greater than start number.');
                }

                NumberRange::create([
                    'team_id' => $team->id,
                    'start_number' => $range['start_number'],
                    'end_number' => $range['end_number'],
                    'description' => $range['description'],
                    'created_by' => auth()->id(),
                ]);
            }

            \DB::commit();

            Notification::make()
                ->title('Team Admin created successfully')
                ->success()
                ->send();

            $this->redirect('/bdsmanager/');

        } catch (\Exception $e) {
            \DB::rollBack();

            Notification::make()
                ->title('Error')
                ->body($e->getMessage())
                ->danger()
                ->send();
        }
    }

    public static function shouldRegisterNavigation(): bool
    {
        return auth()->user()->hasRole('super_admin');
    }
}


Http/Kernel.php

---content---

<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run during every request to your application.
     *
     * @var array<int, class-string|string>
     */
    protected $middleware = [
        // \App\Http\Middleware\TrustHosts::class,
        \Bilfeldt\LaravelRouteStatistics\Http\Middleware\RouteStatisticsMiddleware::class,
        \App\Http\Middleware\TrustProxies::class,
        \Illuminate\Http\Middleware\HandleCors::class,
        \App\Http\Middleware\PreventRequestsDuringMaintenance::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array<string, array<int, class-string|string>>
     */
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],

        'api' => [
            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * The application's middleware aliases.
     *
     * Aliases may be used instead of class names to conveniently assign middleware to routes and groups.
     *
     * @var array<string, class-string|string>
     */
    protected $middlewareAliases = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'auth.session' => \Illuminate\Session\Middleware\AuthenticateSession::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'precognitive' => \Illuminate\Foundation\Http\Middleware\HandlePrecognitiveRequests::class,
        'signed' => \App\Http\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
    ];
}


Http/Middleware/VerifyCsrfToken.php

---content---

<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;

class VerifyCsrfToken extends Middleware
{
    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}


Http/Middleware/RedirectIfAuthenticated.php

---content---

<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string ...$guards): Response
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                return redirect(RouteServiceProvider::HOME);
            }
        }

        return $next($request);
    }
}


Http/Middleware/TrimStrings.php

---content---

<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\TrimStrings as Middleware;

class TrimStrings extends Middleware
{
    /**
     * The names of the attributes that should not be trimmed.
     *
     * @var array<int, string>
     */
    protected $except = [
        'current_password',
        'password',
        'password_confirmation',
    ];
}


Http/Middleware/Authenticate.php

---content---

<?php

namespace App\Http\Middleware;

use Illuminate\Auth\Middleware\Authenticate as Middleware;
use Illuminate\Http\Request;

class Authenticate extends Middleware
{
    /**
     * Get the path the user should be redirected to when they are not authenticated.
     */
    protected function redirectTo(Request $request): ?string
    {
        return $request->expectsJson() ? null : route('login');
    }
}


Http/Middleware/TrustProxies.php

---content---

<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustProxies as Middleware;
use Illuminate\Http\Request;

class TrustProxies extends Middleware
{
    /**
     * The trusted proxies for this application.
     *
     * @var array<int, string>|string|null
     */
    protected $proxies;

    /**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */
    protected $headers =
        Request::HEADER_X_FORWARDED_FOR |
        Request::HEADER_X_FORWARDED_HOST |
        Request::HEADER_X_FORWARDED_PORT |
        Request::HEADER_X_FORWARDED_PROTO |
        Request::HEADER_X_FORWARDED_AWS_ELB;
}


Http/Middleware/ValidateSignature.php

---content---

<?php

namespace App\Http\Middleware;

use Illuminate\Routing\Middleware\ValidateSignature as Middleware;

class ValidateSignature extends Middleware
{
    /**
     * The names of the query string parameters that should be ignored.
     *
     * @var array<int, string>
     */
    protected $except = [
        // 'fbclid',
        // 'utm_campaign',
        // 'utm_content',
        // 'utm_medium',
        // 'utm_source',
        // 'utm_term',
    ];
}


Http/Middleware/PreventRequestsDuringMaintenance.php

---content---

<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance as Middleware;

class PreventRequestsDuringMaintenance extends Middleware
{
    /**
     * The URIs that should be reachable while maintenance mode is enabled.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}


Http/Middleware/EncryptCookies.php

---content---

<?php

namespace App\Http\Middleware;

use Illuminate\Cookie\Middleware\EncryptCookies as Middleware;

class EncryptCookies extends Middleware
{
    /**
     * The names of the cookies that should not be encrypted.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}


Http/Middleware/TrustHosts.php

---content---

<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustHosts as Middleware;

class TrustHosts extends Middleware
{
    /**
     * Get the host patterns that should be trusted.
     *
     * @return array<int, string|null>
     */
    public function hosts(): array
    {
        return [
            $this->allSubdomainsOfApplicationUrl(),
        ];
    }
}


Http/Controllers/Controller.php

---content---

<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
}


Rules/ValidTeamHierarchy.php

---content---

<?php

namespace App\Rules;

use App\Models\Team;
use Closure;
use Illuminate\Contracts\Validation\ValidationRule;

class ValidTeamHierarchy implements ValidationRule
{
    protected $teamId;

    public function __construct($teamId = null)
    {
        $this->teamId = $teamId;
    }

    /**
     * Run the validation rule.
     *
     * @param  \Closure(string): \Illuminate\Translation\PotentiallyTranslatedString  $fail
     */
    public function validate(string $attribute, mixed $value, Closure $fail): void
    {
        // Skip validation if no parent_id is provided
        if (is_null($value)) {
            return;
        }

        // Prevent a team from being its own parent
        if ($this->teamId && $value == $this->teamId) {
            $fail('A team cannot be its own parent.');
            return;
        }

        // Prevent setting a descendant as the parent
        $team = Team::find($this->teamId);
        if ($team) {
            $descendants = collect();
            $team->getDescendants($team->id, $descendants);

            if ($descendants->contains($value)) {
                $fail('Cannot set a descendant as parent.');
            }
        }
    }
}

Console/Kernel.php

---content---

<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;

class Kernel extends ConsoleKernel
{
    /**
     * Define the application's command schedule.
     */
    protected function schedule(Schedule $schedule): void
    {
        // $schedule->command('inspire')->hourly();
    }

    /**
     * Register the commands for the application.
     */
    protected function commands(): void
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }
}


